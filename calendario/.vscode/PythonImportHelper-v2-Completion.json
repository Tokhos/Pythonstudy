[
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "ClientScreen",
        "importPath": "Client.Client_screen",
        "description": "Client.Client_screen",
        "isExtraImport": true,
        "detail": "Client.Client_screen",
        "documentation": {}
    },
    {
        "label": "ProfessionalScreen",
        "importPath": "Professional.Professional_screen",
        "description": "Professional.Professional_screen",
        "isExtraImport": true,
        "detail": "Professional.Professional_screen",
        "documentation": {}
    },
    {
        "label": "ScheduleScreen",
        "importPath": "Schedule.Schedule_screen",
        "description": "Schedule.Schedule_screen",
        "isExtraImport": true,
        "detail": "Schedule.Schedule_screen",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "database.db",
        "description": "database.db",
        "isExtraImport": true,
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "ClientScreen",
        "kind": 6,
        "importPath": "Client.Client_screen",
        "description": "Client.Client_screen",
        "peekOfCode": "class ClientScreen(tk.Frame):\n    def __init__(self, parent, update_combobox_users):\n        super().__init__(parent)\n        self.update_combobox_users = update_combobox_users\n        self.entry_name = tk.Entry(self)\n        self.entry_phone = tk.Entry(self)\n        self.entry_mail = tk.Entry(self)\n        self.entry_adress = tk.Entry(self)\n        tk.Label(self, text=\"Name:\").grid(row=0, column=0, sticky=tk.W)\n        tk.Label(self, text=\"Phone:\").grid(row=1, column=0, sticky=tk.W)",
        "detail": "Client.Client_screen",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "database.db",
        "description": "database.db",
        "peekOfCode": "conn = sqlite3.connect('usuarios.db')\ncursor = conn.cursor()\ncursor.execute('''\n      CREATE TABLE IF NOT EXISTS user_base(\n         id_user INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n     )\n ''')\ncursor.execute('''\n      CREATE TABLE IF NOT EXISTS professional_id(\n         id_pro INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL",
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "database.db",
        "description": "database.db",
        "peekOfCode": "cursor = conn.cursor()\ncursor.execute('''\n      CREATE TABLE IF NOT EXISTS user_base(\n         id_user INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n     )\n ''')\ncursor.execute('''\n      CREATE TABLE IF NOT EXISTS professional_id(\n         id_pro INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL\n     )",
        "detail": "database.db",
        "documentation": {}
    },
    {
        "label": "ProfessionalScreen",
        "kind": 6,
        "importPath": "Professional.Professional_screen",
        "description": "Professional.Professional_screen",
        "peekOfCode": "class ProfessionalScreen(tk.Frame):\n    def __init__(self, parent, update_combobox_pro):\n        super().__init__(parent)\n        self.update_combobox_pro = update_combobox_pro\n        self.entry_name_pro = tk.Entry(self)\n        self.entry_phone_pro = tk.Entry(self)\n        tk.Label(self, text=\"Name:\").grid(row=0, column=0, sticky=tk.W)\n        tk.Label(self, text=\"Phone:\").grid(row=1, column=0, sticky=tk.W)\n        self.entry_name_pro.grid(row=0, column=1)\n        self.entry_phone_pro.grid(row=1, column=1)",
        "detail": "Professional.Professional_screen",
        "documentation": {}
    },
    {
        "label": "ScheduleScreen",
        "kind": 6,
        "importPath": "Schedule.Schedule_screen",
        "description": "Schedule.Schedule_screen",
        "peekOfCode": "class ScheduleScreen(tk.Frame):\n    def __init__(self, parent, update_combobox_users, update_combobox_pro):\n        super().__init__(parent)\n        self.update_combobox_users = update_combobox_users\n        self.update_combobox_pro = update_combobox_pro\n        self.conn = sqlite3.connect(\"usuarios.db\")\n        self.cursor = self.conn.cursor()\n        #User selection\n        self.combobox_user_name = ttk.Combobox(self, values=self.get_user_names(), )\n        #Professional Selection",
        "detail": "Schedule.Schedule_screen",
        "documentation": {}
    },
    {
        "label": "MyApp",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class MyApp(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        self.title(\"Schedule Management\")\n        self.iconbitmap(\"icon.ico\")\n        self.notebook = ttk.Notebook(self)\n        self.notebook.pack(expand=True, fill=tk.BOTH)\n        self.conn = sqlite3.connect(\"usuarios.db\")\n        self.cursor = self.conn.cursor()\n        self.home_frame = tk.Frame(self.notebook)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "init_db",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def init_db():\n    # Connect to or create the database file\n    conn = sqlite3.connect('usuarios.db')\n    cursor = conn.cursor()\n    # Commit changes and close the connection\n    conn.commit()\n    conn.close()\nclass MyApp(tk.Tk):\n    def __init__(self):\n        super().__init__()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "MyApp",
        "kind": 6,
        "importPath": "testclient",
        "description": "testclient",
        "peekOfCode": "class MyApp:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"Application\")\n        self.home_frame = tk.Frame(root)\n        self.client_frame = tk.Frame(root)\n        self.professional_frame = tk.Frame(root)\n        self.schelude_frame = tk.Frame(root)\n        self.entry_name = tk.Entry(self.client_frame)\n        self.entry_phone = tk.Entry(self.client_frame)",
        "detail": "testclient",
        "documentation": {}
    },
    {
        "label": "conn",
        "kind": 5,
        "importPath": "testclient",
        "description": "testclient",
        "peekOfCode": "conn = sqlite3.connect(\"usuarios.db\")\ncursor = conn.cursor()\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    app = MyApp(root)\n    root.geometry(\"500x400\")\n    root.mainloop()",
        "detail": "testclient",
        "documentation": {}
    },
    {
        "label": "cursor",
        "kind": 5,
        "importPath": "testclient",
        "description": "testclient",
        "peekOfCode": "cursor = conn.cursor()\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    app = MyApp(root)\n    root.geometry(\"500x400\")\n    root.mainloop()",
        "detail": "testclient",
        "documentation": {}
    }
]